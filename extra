

// test('<%= name %>', assert => {
//   const gen = cloneableGenerator("<%= name %>")();
//   "<% _.each(expression, function(name) { %> <li><%= name %></li> <% }); %>"
//   gen.next(); // DO_STUFF
//   gen.next(); // DO_STUFF
//   gen.next(); // CHOOSE_NUMBER

//   assert.test('user choose an even number', a => {
//     // cloning the generator before sending data
//     const clone = gen.clone();
//     a.deepEqual(
//       clone.next(chooseNumber(2)).value,
//       put(changeUI('red')),
//       'should change the color to red'
//     );

//     a.equal(
//       clone.next().done,
//       true,
//       'it should be done'
//     );

//     a.end();
//   });

//   assert.test('user choose an odd number', a => {
//     const clone = gen.clone();
//     a.deepEqual(
//       clone.next(chooseNumber(3)).value,
//       put(changeUI('blue')),
//       'should change the color to blue'
//     );

//     a.equal(
//       clone.next().done,
//       true,
//       'it should be done'
//     );

//     a.end();
//   });
// });

import { put, take } from 'redux-saga/effects';
import { cloneableGenerator } from 'redux-saga/utils';

test('doStuffThenChangeColor', assert => {
  const gen = cloneableGenerator(doStuffThenChangeColor)();
  gen.next(); // DO_STUFF
  gen.next(); // DO_STUFF
  gen.next(); // CHOOSE_NUMBER

  assert.test('user choose an even number', a => {
    // cloning the generator before sending data
    const clone = gen.clone();
    a.deepEqual(
      clone.next(chooseNumber(2)).value,
      put(changeUI('red')),
      'should change the color to red'
    );

    a.equal(
      clone.next().done,
      true,
      'it should be done'
    );

    a.end();
  });

  assert.test('user choose an odd number', a => {
    const clone = gen.clone();
    a.deepEqual(
      clone.next(chooseNumber(3)).value,
      put(changeUI('blue')),
      'should change the color to blue'
    );

    a.equal(
      clone.next().done,
      true,
      'it should be done'
    );

    a.end();
  });
});